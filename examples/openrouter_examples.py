"""OpenRouter provider examples demonstrating multiple models."""

import os
from pydantic import BaseModel
from typing import List
from weaver import Weaver
from weaver.providers.openrouter_provider import OpenRouterProvider


class Product(BaseModel):
    name: str
    category: str
    price: float
    in_stock: bool


class Customer(BaseModel):
    name: str
    email: str
    age: int
    preferred_products: List[Product]


def demonstrate_openrouter_models():
    """Demonstrate different OpenRouter models."""
    
    # Check if API key is available
    api_key = os.getenv("OPENROUTER_API_KEY")
    if not api_key:
        print("‚ùå OPENROUTER_API_KEY not found in environment variables")
        print("üí° Get your free key at: https://openrouter.ai/keys")
        print("üí° Set it with: export OPENROUTER_API_KEY='your-key-here'")
        return
    
    print("üîÄ OpenRouter Multi-Model Examples")
    print("=" * 50)
    
    # Available models to test
    models_to_test = [
        ("openai/gpt-4-turbo", "OpenAI GPT-4 Turbo"),
        ("anthropic/claude-3.5-sonnet", "Claude 3.5 Sonnet"),
        ("google/gemini-pro", "Google Gemini Pro"),
        ("meta-llama/llama-3.1-8b-instruct", "Llama 3.1 8B"),
    ]
    
    prompt = "A tech-savvy customer from Brazil who loves electronics and gadgets"
    
    for model, display_name in models_to_test:
        print(f"\nü§ñ Testing {display_name}")
        print("-" * 40)
        
        try:
            # Create Weaver with specific OpenRouter model
            weaver = Weaver(
                provider="openrouter",
                model=model,
                temperature=0.3
            )
            
            # Generate customer data
            customer = weaver.generate(
                model=Customer,
                prompt=prompt,
                max_tokens=500
            )
            
            print(f"‚úÖ Generated by {display_name}:")
            print(f"   Name: {customer.name}")
            print(f"   Email: {customer.email}")
            print(f"   Age: {customer.age}")
            print(f"   Products: {len(customer.preferred_products)} items")
            
            # Show first product as example
            if customer.preferred_products:
                first_product = customer.preferred_products[0]
                print(f"   First product: {first_product.name} (${first_product.price})")
                
        except Exception as e:
            print(f"‚ùå Error with {display_name}: {e}")


def demonstrate_model_recommendations():
    """Show OpenRouter model recommendations."""
    print("\nüéØ OpenRouter Model Recommendations")
    print("=" * 50)
    
    use_cases = {
        "general": "General purpose data generation",
        "fast": "Quick, lightweight generation", 
        "creative": "Creative and diverse outputs",
        "code": "Technical/code-related data",
        "analysis": "Complex analytical tasks",
        "budget": "Cost-effective generation"
    }
    
    for use_case, description in use_cases.items():
        recommended = OpenRouterProvider.get_recommended_model(use_case)
        print(f"üìå {use_case.capitalize()}: {recommended}")
        print(f"   ‚Üí {description}")


def demonstrate_available_models():
    """Show available models by provider."""
    print("\nüìã Available Models by Provider")
    print("=" * 50)
    
    models_by_provider = OpenRouterProvider.get_available_models()
    
    for provider, models in models_by_provider.items():
        print(f"\nüè¢ {provider.upper()}:")
        for model in models:
            json_support = "‚úÖ" if model in OpenRouterProvider.JSON_MODE_MODELS else "‚ö†Ô∏è"
            print(f"   {json_support} {model}")
    
    print(f"\nüí° Legend:")
    print(f"   ‚úÖ = Supports JSON mode")
    print(f"   ‚ö†Ô∏è = Uses enhanced prompting")


def test_multiple_providers():
    """Compare OpenAI direct vs OpenRouter."""
    
    openai_key = os.getenv("OPENAI_API_KEY")
    openrouter_key = os.getenv("OPENROUTER_API_KEY")
    
    if not (openai_key or openrouter_key):
        print("‚ùå Need either OPENAI_API_KEY or OPENROUTER_API_KEY")
        return
    
    print("\n‚öñÔ∏è  Provider Comparison")
    print("=" * 50)
    
    prompt = "A young startup founder from S√£o Paulo"
    
    if openai_key:
        try:
            print("\nüîµ OpenAI Direct:")
            weaver_openai = Weaver(provider="openai")
            customer_openai = weaver_openai.generate(model=Customer, prompt=prompt)
            print(f"   Generated: {customer_openai.name} ({customer_openai.email})")
        except Exception as e:
            print(f"   ‚ùå Error: {e}")
    
    if openrouter_key:
        try:
            print("\nüîÄ OpenRouter (GPT-4):")
            weaver_or = Weaver(provider="openrouter", model="openai/gpt-4-turbo")
            customer_or = weaver_or.generate(model=Customer, prompt=prompt)
            print(f"   Generated: {customer_or.name} ({customer_or.email})")
        except Exception as e:
            print(f"   ‚ùå Error: {e}")


def main():
    """Run all OpenRouter examples."""
    demonstrate_model_recommendations()
    demonstrate_available_models()
    demonstrate_openrouter_models()
    test_multiple_providers()
    
    print("\nüéâ OpenRouter examples completed!")


if __name__ == "__main__":
    main()